theory CloudCompute begin

// Function signature and definition of the equational theory E

functions: Commutative/2, adec/2, aenc/2, fst/1, h/1, mul/2 [private],
           pair/2, pk/1, sdec/2, senc/2, set/3, snd/1, true/0
equations:
    Commutative(senc(senc(data, sk1), sk2), senc(senc(data, sk2), sk1))
  = true,
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) pair_key:
   [ Fr( ~ltkA ), Fr( ~ltkB ) ]
  -->
   [ !Pair_key( ~ltkA, h(~ltkB) ), !Pair_key( ~ltkB, h(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Register_Paillier_pk:
   [ Fr( ~ltkA ) ]
  -->
   [
   !Ltk_Paillier( $A, ~ltkA ), !Pk_Paillier( $A, pk(~ltkA) ),
   Out( pk(~ltkA) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init:
   [
   Fr( ~data1 ), Fr( ~data2 ), Fr( ~data3 ), Fr( ~data4 ), Fr( ~cost1 ),
   Fr( ~cost2 ), Fr( ~cost3 ), Fr( ~cost4 )
   ]
  --[ Init( ) ]->
   [
   !Set_client( <<~data1, ~cost1>, <~data2, ~cost2>, ~data3, ~cost3> ),
   !Set_server( <~data2, ~data3, ~data4> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server_1:
   [ !Set_server( <data2, data3, data4> ), !Pair_key( sk_S, h(sk_C) ) ]
  --[ Server_1_m( ) ]->
   [
   Out( <senc(data2, sk_S), senc(data3, sk_S), senc(data4, sk_S)> ),
   Server_1( sk_S, sk_C, <data2, data3, data4> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_1:
   [
   !Set_client( <<data1, cost1>, <data2, cost2>, data3, cost3> ),
   !Pair_key( sk_C, h(sk_S) ), !Pk_Paillier( $Client, pk(psk) ),
   In( <m2, m3, m4> )
   ]
  --[ Client_1_m( ) ]->
   [
   Out( <
         <<senc(data1, sk_C), aenc(cost1, pk(psk))>, 
          <senc(data2, sk_C), aenc(cost2, pk(psk))>, senc(data3, sk_C), 
          aenc(cost3, pk(psk))>, 
         senc(m2, sk_C), senc(m3, sk_C), senc(m4, sk_C)>
   ),
   Client_1( <<data1, cost1>, <data2, cost2>, data3, cost3>, sk_C, psk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server_2:
   [
   Server_1( sk_S, sk_C, <data2, data3, data4> ),
   In( <<<fp1, sp1>, <fp2, sp2>, fp3, sp3>, d2, d3, d4> )
   ]
  --[
  Eq( Commutative(d2, senc(fp2, sk_S)), true ),
  Eq( Commutative(d3, senc(fp3, sk_S)), true ), Finishm( )
  ]->
   [ Out( mul(sp2, sp3) ), Server_2( sk_S, sk_C, <data2, data3, data4> ) ]

  /*
  rule (modulo AC) Server_2:
     [
     Server_1( sk_S, sk_C, <data2, data3, data4> ),
     In( <<<fp1, sp1>, <fp2, sp2>, fp3, sp3>, d2, d3, d4> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), Finishm( ) ]->
     [ Out( mul(sp2, sp3) ), Server_2( sk_S, sk_C, <data2, data3, data4> ) ]
    variants (modulo AC)
    1. d2    = d2.17
       d3    = d3.17
       fp2   = fp2.17
       fp3   = fp3.17
       sk_S  = sk_S.17
       z     = Commutative(d2.17, senc(fp2.17, sk_S.17))
       z.1   = Commutative(d3.17, senc(fp3.17, sk_S.17))
    
    2. d2    = d2.20
       d3    = senc(senc(x.17, x.18), x.19)
       fp2   = fp2.20
       fp3   = senc(x.17, x.19)
       sk_S  = x.18
       z     = Commutative(d2.20, senc(fp2.20, x.18))
       z.1   = true
    
    3. d2    = senc(senc(x.17, x.18), x.19)
       d3    = d3.20
       fp2   = senc(x.17, x.19)
       fp3   = fp3.20
       sk_S  = x.18
       z     = true
       z.1   = Commutative(d3.20, senc(fp3.20, x.18))
    
    4. d2    = senc(senc(x.17, x.18), x.19)
       d3    = senc(senc(x.20, x.18), x.21)
       fp2   = senc(x.17, x.19)
       fp3   = senc(x.20, x.21)
       sk_S  = x.18
       z     = true
       z.1   = true
  */

rule (modulo E) Client_2:
   [
   In( IntersectionSum ),
   Client_1( <<data1, cost1>, <data2, cost2>, data3, cost3>, sk_C, psk )
   ]
  --[
  Eq( IntersectionSum, mul(aenc(cost2, pk(psk)), aenc(cost3, pk(psk))) ),
  Finish( data2, cost2, data3, cost3 )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction Eq:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction unique_init:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction unique_Server:
  "∀ #i #j. ((Client_1_m( ) @ #i) ∧ (Client_1_m( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction unique_client:
  "∀ #i #j. ((Server_1_m( ) @ #i) ∧ (Server_1_m( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma reachable:
  exists-trace "∃ m1 m2 c1 c2 #i. Finish( m1, m2, c1, c2 ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ m1 m2 c1 c2 #i. (Finish( m1, m2, c1, c2 ) @ #i)"
*/
simplify
solve( Client_1( <<data1, cost1>, <m1, m2>, c1, c2>, sk_C, psk ) ▶₁ #i )
  case Client_1_case_1
  solve( !KU( mul(aenc(~cost2, pk(~ltkA)), aenc(~cost3, pk(~ltkA)))
         ) @ #vk )
    case Server_2_case_1
    solve( !KU( senc(senc(x, ~ltkA.2), x.1) ) @ #vk.19 )
      case Client_1_case_1
      solve( !KU( senc(x, ~ltkA.1) ) @ #vk.14 )
        case Client_1_case_2
        solve( !KU( senc(senc(x, ~ltkA.2), x.1) ) @ #vk.21 )
          case Client_1_case_1
          solve( !KU( aenc(~cost2, pk(~ltkA)) ) @ #vk.18 )
            case Client_1
            solve( !KU( aenc(~cost3, pk(~ltkA)) ) @ #vk.19 )
              case Client_1
              solve( !KU( senc(~data2, ~ltkA.2) ) @ #vk.13 )
                case Server_1
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Identification_Secrecy:
  all-traces
  "∀ d1 c1 d2 c2 #i.
    (Finish( d1, c1, d2, c2 ) @ #i) ⇒
    ((¬(∃ #j. K( d1 ) @ #j)) ∨ (∃ #j. K( d2 ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ d1 c1 d2 c2 #i.
  (Finish( d1, c1, d2, c2 ) @ #i)
 ∧
  (∃ #j. (K( d1 ) @ #j)) ∧ (∀ #j. (K( d2 ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Client_1( <<data1, cost1>, <d1, c1>, d2, c2>, sk_C, psk ) ▶₁ #i )
  case Client_1_case_1
  solve( !KU( mul(aenc(~cost2, pk(~ltkA)), aenc(~cost3, pk(~ltkA)))
         ) @ #vk )
    case Server_2_case_1
    solve( !KU( ~data2 ) @ #vk.1 )
      case Client_1
      by solve( !KU( ~ltkA.1 ) @ #vk.24 )
    next
      case Server_1
      by solve( !KU( ~ltkA.2 ) @ #vk.24 )
    qed
  next
    case Server_2_case_2
    solve( !KU( ~data2 ) @ #vk.1 )
      case Client_1
      by solve( !KU( ~ltkA.1 ) @ #vk.24 )
    next
      case Server_1
      by solve( !KU( ~ltkB.1 ) @ #vk.24 )
    qed
  qed
next
  case Client_1_case_2
  solve( !KU( mul(aenc(~cost2, pk(~ltkA)), aenc(~cost3, pk(~ltkA)))
         ) @ #vk )
    case Server_2_case_1
    solve( !KU( ~data2 ) @ #vk.1 )
      case Client_1
      by solve( !KU( ~ltkB ) @ #vk.24 )
    next
      case Server_1
      by solve( !KU( ~ltkA.2 ) @ #vk.24 )
    qed
  next
    case Server_2_case_2
    solve( !KU( ~data2 ) @ #vk.1 )
      case Client_1
      by solve( !KU( ~ltkB ) @ #vk.24 )
    next
      case Server_1
      by solve( !KU( ~ltkB.1 ) @ #vk.24 )
    qed
  qed
qed

lemma Related_data_Secrecy:
  all-traces
  "∀ d1 c1 d2 c2 #i.
    (Finish( d1, c1, d2, c2 ) @ #i) ⇒
    ((¬(∃ #j. K( c1 ) @ #j)) ∨ (∃ #j. K( c2 ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ d1 c1 d2 c2 #i.
  (Finish( d1, c1, d2, c2 ) @ #i)
 ∧
  (∃ #j. (K( c1 ) @ #j)) ∧ (∀ #j. (K( c2 ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Client_1( <<data1, cost1>, <d1, c1>, d2, c2>, sk_C, psk ) ▶₁ #i )
  case Client_1_case_1
  solve( !KU( mul(aenc(~cost2, pk(~ltkA)), aenc(~cost3, pk(~ltkA)))
         ) @ #vk )
    case Server_2_case_1
    solve( !KU( ~cost2 ) @ #vk.1 )
      case Client_1
      by solve( !KU( ~ltkA ) @ #vk.24 )
    qed
  next
    case Server_2_case_2
    solve( !KU( ~cost2 ) @ #vk.1 )
      case Client_1
      by solve( !KU( ~ltkA ) @ #vk.24 )
    qed
  qed
next
  case Client_1_case_2
  solve( !KU( mul(aenc(~cost2, pk(~ltkA)), aenc(~cost3, pk(~ltkA)))
         ) @ #vk )
    case Server_2_case_1
    solve( !KU( ~cost2 ) @ #vk.1 )
      case Client_1
      by solve( !KU( ~ltkA ) @ #vk.24 )
    qed
  next
    case Server_2_case_2
    solve( !KU( ~cost2 ) @ #vk.1 )
      case Client_1
      by solve( !KU( ~ltkA ) @ #vk.24 )
    qed
  qed
qed

/* All well-formedness checks were successful. */

end